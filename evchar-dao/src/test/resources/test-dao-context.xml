<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-4.0.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
 
 	<context:component-scan base-package="cn.evchar" />
	<context:annotation-config />
	
	<!--  测试用例， 引入配置文件 -->
 
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" > 
		<property name="url" value="${jdbc.connection.url}" />
		<property name="username" value="${jdbc.connection.username}" />
		<property name="password" value="${jdbc.connection.password}" />
		<property name="initialSize" value="${jdbc.initialPoolSize}" />
		<property name="minIdle" value="${jdbc.minPoolSize}" /> 
		<property name="maxActive" value="${jdbc.maxPoolSize}" />
		<property name="maxWait"  value="${jdbc.checkoutTimeout}"/>
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.idleConnectionTestPeriod}"/>
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
		<property name="validationQuery"><value>SELECT 'x'</value></property>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
		<property name="poolPreparedStatements" value="false"/>
		<property name="maxOpenPreparedStatements" value="20"/>
   </bean>
 
 	<!-- Transaction manager for a single Hibernate SessionFactory (alternative 
		to JTA) -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>
      
    <bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<!-- 扫描实体类model -->
				<value>cn.evchar.common.entity</value>
			</list>
		</property>
	</bean>
	
	
	
	
	
	
	<!-- 单元测试专用， 事务 -->
	
	  <!-- 配置事务异常封装 -->
   <bean id="persistenceExceptionTranslationPostProcessor" 
   	class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
   
   <!--  声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" />
			<tx:method name="*"  propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config expose-proxy="true">
		<!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="txPointcut" expression="execution(* cn.evchar.dao..*.*(..))" />
		<!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config>
	
	
	 
 
</beans>